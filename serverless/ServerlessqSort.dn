const char debugMSG[] = "[@ServerlessIOC]"
const char SWC_PATH[] = "/swc/"
const int LISTEN_PORT = 8081
// list of params
const char PORT_NUM[] = "port_num"
const char HELP[]     = "help"

data PathMapping {
	char path[]
	char file[]
}

data ParsedParam {
	char type[]
	char value[]
	char raw[]
}

data Command {
	const int GET = 1
	const int POST = 2
	const int PUT = 3
	const int DELETE = 4
	int type
	
	char resource[]
	Header headers[]
}


data vector{
	int list[]
	int value
}
	

component provides App requires data.IntUtil intUtil, io.FileSystem fileSystem,io.TextFile,data.json.JSONEncoder parser,
	io.File, ws.DocStream, ws.Web:nfrp web, data.adt.HashTable, encoding.Encoder:uri encoder,
	data.StringUtil stringUtil, io.Output out, data.mysql.MySQL, net.TCPSocket, net.TCPServerSocket,
	util.ConfigFile, time.Timer t , interceptor.DSInterceptor,util.Math math,time.Calendar ic,time.DateUtil dateUtil
    {
		
	int listenPort = 0
	char web_root[] = "./"
	static ConfigFile configFile = null

 	char[] getHeaderValue(Command cmd, char key[]) {
		key = stringUtil.lowercase(key)
		for (int i = 0; i < cmd.headers.arrayLength; i++) {
			if (stringUtil.lowercase(cmd.headers[i].key) == key) {
				return cmd.headers[i].value
			}
		}
		return null
	}

	HashTable getParams(char resource[], char ex[]) {
		HashTable result = new HashTable()
		String dirs[] = stringUtil.explode(resource, "/")
		String dirsEx[] = stringUtil.explode(ex, "/")
		if (dirs.arrayLength != dirsEx.arrayLength) { return null }
		for (int i = 0; i < dirs.arrayLength; i++) {
			char key[] = stringUtil.subString(dirsEx[i].string, 1, dirsEx[i].string.arrayLength-2)
			result.put(key, dirs[i])
		}
		return result
	}

	HashTable getQueryString(HashTable table, char path[]) {
		String queryString[] = stringUtil.explode(path, "?")
		if (queryString.arrayLength > 1) {
			if (table == null) { table = new HashTable() }
			String helper[] = stringUtil.explode(queryString[1].string, "&")
			String keyValue[]
			for (int count = 0; count < helper.arrayLength; count++) {
				keyValue = stringUtil.explode(helper[count].string, "=")
				table.put(keyValue[0].string, 
					new String(encoder.decode(keyValue[1].string)))
			}	
		}
		return table
	}

	HashTable getURLMaps(char command[], String exprs[]) {
        if (exprs == null) { return null }
		else {
			for (int count = 0; count < exprs.arrayLength; count++) {
				HashTable table = getParams(command, exprs[count].string)
				if (table != null) { return table }
			}
		}
		return null
	}
	
	


    String[] getURLPatterns() {
		String exprs[] = new String[]()
        exprs = new String[](exprs, new String("/qsort/"))
		return exprs
	}

    bool serveFunction_POST(DocStream ds, char path[], char command[], char ctype[], byte payload[]) {
		return post(command, ctype, payload, ds, getURLMaps(command, getURLPatterns()))
	}

    bool serveFunction_GET(DocStream ds, char path[], char command[]) {
		return get(command, ds, getQueryString(getURLMaps(command, getURLPatterns()), command))
	}

    bool post(char path[], char contentType[], byte content[], DocStream stream, HashTable params) {
		bool result = false
		DSInterceptor interceptor = new DSInterceptor(null, null, null)
		interceptor.set(stream)
		result = post2(path, contentType, content, interceptor, params)
		if ((result) && (interceptor.get() != null)) {
			stream.write(interceptor.get())
		}
		return result
	}

    bool post2(char path[], char contentType[], byte content[], DocStream stream, HashTable params){
        if (params == null) { failed(stream) }
        //String jsonvector[] = stringUtil.explode(content,"|")
		
        if (match(path, "/qsort/")) {
			//char jsonresult[] = qsortinitial(content, stream) 
            String jsonvector[] = stringUtil.explode(content,"[")
            String jsonvector2[] = stringUtil.explode(jsonvector[1].string,"]")
            String vetor[] = stringUtil.explode(jsonvector2[0].string,",")
            int finalform[]
            for (int i = 0 ; i < vetor.arrayLength ; i++){
                char helper[] = stringUtil.trim(vetor[i].string)
                finalform = new int[](finalform,intUtil.intFromString(helper))
            }
            finalform = qsort(finalform)
            vector sorted = new vector()
            sorted.list = clone finalform
            sorted.value = 10
            char sortedjson[] = new char[](parser.jsonFromData(sorted,null))
            stream.write("$(sortedjson)")
            //stream.write(content)
		} else { failed(stream) }
		return true
    }


    bool get(char path[], DocStream stream, HashTable params) {
        
        bool result = false
		/*
        DSInterceptor interceptor = new DSInterceptor(null, null, null)
		interceptor.set(stream)
		result = get2(path, interceptor, params)
		if ((result) && (interceptor.get() != null)) {
			stream.write(interceptor.get())
		}
        */
		return result
		//return web.get(path, stream, params)
	}

    bool get2(char path[], DocStream stream, HashTable params) {
		// getting id from params
		if (params == null) { failed(stream) }
		String idStr = params.get("id")
        char id[] = idStr.string
        char jsonvector[]
		if (match(path, "/qsort/")) {
            char jsonresult[] = qsortinitial(jsonvector,stream)            
		}
		else { failed(stream) }
		return true
	}

    void failed(DocStream s) {
		s.write("{\"response\" : \"failed\"}")
	}
	
	void swap(int arr[], int i, int j){
		int temp = arr[i]
		arr[i] = arr[j]
		arr[j] = temp
	}
	
	int partition(int arr[], int low, int high){
		
		int pivot = arr[high]
		int i = (low - 1)
		
		for ( int j  = low; j <= high - 1; j++){
			if ( arr[j] <= pivot ){
				i++
				swap(arr,i,j)
			}
		}
		swap(arr,i+1,high)
		return (i+1)
	}
	
	char[] qsortinitial(char jsonvector[], DocStream stream){
		
        vector sorting = new vector()
		sorting = parser.jsonToData(jsonvector,typeof(vector),null)
		int array[] = clone sorting.list
		array = qsort(array)
		vector sorted = new vector()
		sorted.list = clone array
		sorted.value = sorting.value
		char sortedjson[] = new char[](parser.jsonFromData(sorted,null))
        stream.write("$(sortedjson)")
        return sortedjson
	}
	
	int[] qsort(int list[]){
		qsortrec(list,0,list.arrayLength-1)
		return list
	}
	
	void qsortrec(int arr[], int low , int high){
		if ( low < high ){
			int pi = partition(arr,low,high)
			qsortrec(arr,low,pi-1)
			qsortrec(arr,pi+1,high)
		}
	}
	
	void printArray(int arr[]){
		for ( int i = 0 ; i < arr.arrayLength; i++){
			out.print(" $(intUtil.intToString(arr[i])) ")
		}
		out.println(" ")
	}
	

    bool match(char path[], char expr[]) {
		String helper[] = stringUtil.explode(path, "?")
		String dirs[] = stringUtil.explode(helper[0].string, "/")
		String exprDirs[] = stringUtil.explode(expr, "/")
		if (dirs.arrayLength != exprDirs.arrayLength) { return false }
		for (int i = 0; i < exprDirs.arrayLength; i++) {
			if ((dirs[i].string != exprDirs[i].string) && (exprDirs[i].string != "*")) {
				return false
			}
		}
		return true
	}

   

	
	
	
	bool serveFile(char command[], TCPSocket s) {
		char path[] = new char[](web_root, command)
		if (fileSystem.exists(path)) {
			File fd = new File(path, File.FILE_ACCESS_READ)
			byte dat[] = fd.read(fd.getSize())
			s.send("HTTP/1.1 200 OK\r\n")
			s.send("Server: Dana Web Engine\r\n")
			s.send("Connection: close\r\n")
			s.send("Content-length: $(intUtil.intToString(fd.getSize()))\r\n")
			s.send("\r\n")
			fd.close()
			s.send(dat)
			return true
		}	
		return false
	}
	
	bool staticFile(char command[]) {
		if ((command.arrayLength >= SWC_PATH.arrayLength) && 
			(stringUtil.subString(command, 0, SWC_PATH.arrayLength) == SWC_PATH)) {
			return true
		}
		return false
	}

	void process(Command cmd, TCPSocket s) {
		String resource = new String(cmd.resource)
		char handler[]
		bool success = false
		if (staticFile(cmd.resource)) { success = serveFile(cmd.resource, s) }
		else {
			DocStream ds = new DocStream(s, cmd.headers, null)
			if (cmd.type == Command.GET) { success = serveFunction_GET(ds, handler, resource.string) }
			else if (cmd.type == Command.POST) {
				//read the payload first
				char ctype[] = getHeaderValue(cmd, "content-type")
				int plen = intUtil.intFromString(getHeaderValue(cmd, "content-length"))
				byte payload[] = s.recv(plen)
				success = serveFunction_POST(ds, handler, resource.string, ctype, payload)
			}
			if (success) { ds.endStream() }
		}
		if (!success) {
			s.send("HTTP/1.1 404 Resource Not Found\r\n")
			s.send("Server: Dana Web Engine\r\n")
			s.send("Connection: close\r\n")
			s.send("Content-length: 0\r\n")
			s.send("\r\n")
		}
		s.disconnect()
	}
	
	void help() {
		out.println("Web Framework [version 100]")
		out.println("\nUsage: dana ws.core")
		out.println("\nOptions:")
		out.println("-help      \t List commands that can be passed as parameter to the Web Framework core component.")
		out.println("-p [number]\t Specify the port on which the server will be running.")
	}

	// add the alias mapping and do not forget to add composed args to the composedArg function
	char[] getArg(char alias[]) {
		if (alias == "-p") { return PORT_NUM }
		else if (alias == "-help") { return HELP }
		else { throw new Exception("$alias not a valid param.") }
		return null
	}

	// verify if a param is composed, i.e. -p 232
	bool composedArg(char arg[]) {
		if (arg == PORT_NUM) { return true }
		return false
	}

	ParsedParam[] parseParam(AppParam params[]) {
		ParsedParam pParam[] = null
		bool twoParts = false
		for (int count = 0; count < params.arrayLength; count++) {
			ParsedParam p
			if (params[count].string[0] == "-") {
				p = new ParsedParam()
				p.type = getArg(params[count].string)
				if (p.type == null) { return null }
				if (composedArg(p.type)) {
					p.value = params[count+1].string
					if (p.value[0] == "-") { throw new Exception("$(params[count].string) requires a second argument.") }
					p.raw = new char[](params[count].string, " ", params[count+1].string)
					count++
				} else { p.raw = params[count].string }
				pParam = new ParsedParam[](pParam, p)
			} else { out.println("Invalid param! For more information type: dana ws.core -help") }
		}
		return pParam
	}

	int processParams(AppParam params[]) {
		if (params.arrayLength == 0) { return 1 }
		if (params.arrayLength > 0) {
			ParsedParam pParam[] = parseParam(params)
			if (pParam == null) { return 0 }
			for (int count = 0; count < pParam.arrayLength; count++) {
				if (pParam[count].type == PORT_NUM) {
					listenPort = intUtil.intFromString(pParam[count].value)
				} else if (pParam[count].type == HELP) {
					help()
					return 0
				} else { throw new Exception("$(pParam[count].raw) is not a valid param.") }
			}
		}
		return 1
	}
	
	Command readCommand(TCPSocket socket) {
		Command cmd = new Command()
		Header headers[]
		char buf[]
		char last4[] = new char[4]
		while (last4 != "\r\n\r\n") {
			char b[] = socket.recv(1)
			buf = new char[](buf, b)
			last4[0] = last4[1]
			last4[1] = last4[2]
			last4[2] = last4[3]
			last4[3] = b[0]
		}
		String lines[] = stringUtil.explode(buf, "\r\n")
		String cmd_parts[] = stringUtil.explode(lines[0].string, " ")
		if (stringUtil.lowercase(cmd_parts[0].string) == "get") { cmd.type = Command.GET }
		else if (stringUtil.lowercase(cmd_parts[0].string) == "post") { cmd.type = Command.POST }
		cmd.resource = cmd_parts[1].string
		for (int i = 1; i < lines.arrayLength; i++) {
			int ndx = stringUtil.find(lines[i].string, ":") + 1
			char key[] = stringUtil.subString(lines[i].string, 0, ndx - 1)
			char value[] = stringUtil.trim(stringUtil.subString(lines[i].string, 
				ndx, lines[i].string.arrayLength - ndx))
			headers = new Header[](headers, new Header(stringUtil.lowercase(key), value))
		}
		cmd.headers = headers	
		return cmd
	}
	
	void processStream(TCPSocket s) {
		Command cmd = readCommand(s)
		if (cmd == null) {
			s.disconnect()
			throw new Exception("malformed or interrupted request")
		}
		process(cmd, s)
	}

	int App:main(AppParam params[]) {
		
        listenPort = LISTEN_PORT
		if (processParams(params) != 0) {
            
			TCPServerSocket s = new TCPServerSocket()
			if (!s.bind(TCPServerSocket.ANY_ADDRESS, listenPort)) {
				throw new Exception("Failed to bind master socket")
			}
			while (true) {
				TCPSocket cs = new TCPSocket()
				if (cs.accept(s)) { asynch::processStream(cs) }
			}
		}
        
        return 0
	}


}


