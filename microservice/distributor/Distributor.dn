const char debugMSG[]	  = "[@Distributor]"

const char HELP[]       = "help"
const char CREATE[]     = "create"
const char LOCAL[]      = "local"
const char PERCEPTION[] = "perception"
const char TEST[]		= "test"
const char FULLTEST[]   = "fulltest"
const char MR[]			= "mr"
const char MRR[]		= "mrr"
const char HD[]			= "hd"
const char HRD[]		= "hrd"
const char EXPAND[]     = "expand"
const char DISTRIBUTE[] = "distribute"
const char EXIT[]       = "exit"

data Amount{
		char name[]
		char quantity[]
}

component provides App requires io.Output out, data.StringUtil strUtil, data.IntUtil iu, io.Input in,io.TextFile,
	monitoring.Perception, data.json.JSONEncoder encoder,data.json.JSONParser parser,
     data.DecUtil du, time.Timer t,data.adt.HashTable,serverctl.Serverctl SCTL{

	String remoteConfigs[] 		= null
	String localConfigs[] 		= null
	String distributedProxies[] = null
	Perception perception 		= null
    String configsStr[] 		= null
	Amount test 				= new Amount()
	

	void help() {
		out.println("Command list:")
		out.println(" $(HELP) - to list all commands")
        out.println(" $(EXPAND) - to change memory config")
        out.println(" $(PERCEPTION) - to get Perception Data")
		out.println(" $(LOCAL) - to bring list locally")
        out.println(" $(EXIT) - to finish execution")
	}

	void local() {
        int j
        for ( int i = 0 ; i < localConfigs.arrayLength; i++){
            if ((strUtil.ifind(localConfigs[i].string,"cache/CacheLRU.o") != StringUtil.NOT_FOUND) &&
               (strUtil.ifind(localConfigs[i].string,"cache/CacheExtended.o") == StringUtil.NOT_FOUND)){
                j = i
            }
        }    
		perception.setConfig(localConfigs[j].string)
		out.println("$(debugMSG) Local composition running.")
        //out.println("$(localConfigs[j].string)")
        out.println(" ")
	}

    void localextended() {
        int j
        for ( int i = 0 ; i < localConfigs.arrayLength; i++){
            if ((strUtil.ifind(localConfigs[i].string,"cache/CacheLRU.o") == StringUtil.NOT_FOUND) &&
               (strUtil.ifind(localConfigs[i].string,"cache/CacheExtended.o") != StringUtil.NOT_FOUND)){
                j = i
            }
        }    
		perception.setConfig(localConfigs[j].string)
		out.println("$(debugMSG) Extended composition running.")
        //out.println("$(localConfigs[j].string)")
        out.println(" ")
	}

    

	void distribute(char proxyInterface[]) {
		char remoteConfig[] = getRemoteConfig("$(proxyInterface)")
		if (remoteConfig != null) {
			perception.setConfig(remoteConfig)
			out.println("$(debugMSG) Remote composition [($proxyInterface)] running.")
		} else {
			throw new Exception("Something went wrong! Couldn't find remote proxy.")
		}
	}

	void perception() {
		PerceptionData pD[] = encoder.jsonToArray(perception.getPerceptionData(), typeof(PerceptionData[]), null)
		for (int i = 0; i < pD.arrayLength; i++) {
			for (int cMetrics = 0; cMetrics < pD[i].metrics.arrayLength; cMetrics++) {
				dec value = pD[i].metrics[cMetrics].value
				dec counter = pD[i].metrics[cMetrics].counter
				dec avgRT = value/counter
				out.println("$(debugMSG) Avg response time: $(du.decToString(avgRT))")
			}
			for (int cEvents = 0; cEvents < pD[i].events.arrayLength; cEvents++) {
				out.println("$(debugMSG) Request type: $(pD[i].events[cEvents].type) - $(pD[i].events[cEvents].counter) ")
			}
		}
	}

	dec getAvgResponseTime() {
		PerceptionData pD[] = encoder.jsonToArray(perception.getPerceptionData(), typeof(PerceptionData[]), null)
		dec result = 0.0
		if ((pD != null) && (pD[0].metrics.arrayLength > 0)) {
			dec value = pD[0].metrics[0].value
			dec counter = pD[0].metrics[0].value
			result = value/counter
		}
		return result
	}

	void observationLoop(int numCycles, int observationWindow) {
		getAvgResponseTime()
		for (int i = 0; i < numCycles; i++) {
			t.sleep(observationWindow)
			out.println("$(debugMSG) $(du.decToString(getAvgResponseTime()))")
		}
	}

	void commandInterpret(char cmd[]) {
		String cmdList[] = strUtil.explode(cmd, " ")
		char quantity[]
		char j[]
        int qt 

        if (cmdList.arrayLength == 1) {
					if (cmd == HELP) {
						help()
					} else if (cmd == LOCAL) {
						local()
                    } else if (cmd == EXPAND) {
                        localextended()
						
					}else if (cmd == DISTRIBUTE){
						
						String AuxConfigs[] 	= null 
						String currentConfigs[] = null
						HashTable comp_table	= new HashTable()
						
						out.println("How many components to Distribute ( 1 to 4 ) : ")
						char amountcomponent[] = in.readln()
						
						for (int i = 0 ; i < iu.intFromString(amountcomponent) ; i++){
							Amount a = new Amount()
							
							out.println("What component to distribute: ")
							out.println("HD \nHRD \nMR \nMRR")
							char comp[] = in.readln()
							while ( (comp != HD) && (comp != HRD) && (comp != MR ) && (comp != MRR)  ){
								out.println("Try again")
								comp = in.readln()
							}
					
							if ( comp_table.get(comp) != null ) {
								out.println("ERROR : Component already selected ")
								i--
								
							} else {
								out.println("How many copies? ")
								a.quantity = in.readln()
								comp_table.put(comp,a)
							}
							a = comp_table.get(comp)
				
						}
						
						// MEANS WE HAVE TO DISTRIBUTE HD COMPONENT
						int i2 = 0
						if ( comp_table.get("hd") != null ){
							
							test = comp_table.get("hd")
							quantity = test.quantity
							SCTL.create_pods("hd",iu.intFromString(quantity))
							
							for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){	
								if ((strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") != StringUtil.NOT_FOUND)){
									AuxConfigs = new String[](AuxConfigs, remoteConfigs[i])
									i2++
								}	
							}
						}else{
							for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){	
								if ((strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") == StringUtil.NOT_FOUND)){
									AuxConfigs = new String[](AuxConfigs, remoteConfigs[i])
									i2++
								}
							}
						}
					
						// HDR COMPONENT
						i2 = 0
						if ( comp_table.get("hrd") != null ){
							
							test = comp_table.get("hrd")
							quantity = test.quantity
							SCTL.create_pods("hrd",iu.intFromString(quantity))
							
							for ( int i = 0 ; i < AuxConfigs.arrayLength; i++){
								if ((strUtil.ifind(AuxConfigs[i].string,"hdr/getHDRProxy.o") != StringUtil.NOT_FOUND)){
									currentConfigs = new String[](currentConfigs, AuxConfigs[i])								
									i2++
								}
							}
						}else{
							for ( int i = 0 ; i < AuxConfigs.arrayLength; i++){
								if ((strUtil.ifind(AuxConfigs[i].string,"hdr/getHDRProxy.o") == StringUtil.NOT_FOUND)){
									currentConfigs = new String[](currentConfigs, AuxConfigs[i])								
									i2++
								}
							}	
						}
						
						// MR COMPONENT
						i2 = 0
						AuxConfigs = null
						if ( comp_table.get("mr") != null ){
							
							test = comp_table.get("mr")
							quantity = test.quantity
							SCTL.create_pods("mr",iu.intFromString(quantity))
							
							for ( int i = 0 ; i < currentConfigs.arrayLength; i++ ) {
								if ((strUtil.ifind(currentConfigs[i].string,"mr/getMRProxy.o") != StringUtil.NOT_FOUND )){
									AuxConfigs = new String[](AuxConfigs, currentConfigs[i])
									i2++
								}
							}
						}else{
							for ( int i = 0 ; i < currentConfigs.arrayLength; i++ ) {
								if ((strUtil.ifind(currentConfigs[i].string,"mr/getMRProxy.o") == StringUtil.NOT_FOUND )){
									AuxConfigs = new String[](AuxConfigs, currentConfigs[i])
									i2++
								}
							}
						}
						
						// MRR COMPONENT
						currentConfigs = null
						i2 = 0
						if ( comp_table.get("mrr") != null ){
							
							test = comp_table.get("mrr")
							quantity = test.quantity
							SCTL.create_pods("mrr",iu.intFromString(quantity))
							
							for ( int i = 0 ; i < AuxConfigs.arrayLength; i++) {
								if ((strUtil.ifind(AuxConfigs[i].string,"mrr/getMRRProxy.o") != StringUtil.NOT_FOUND )){
									currentConfigs = new String[](currentConfigs, AuxConfigs[i])
									i2++
								}
							}
						}else{
							for ( int i = 0 ; i < AuxConfigs.arrayLength; i++) {
								if ((strUtil.ifind(AuxConfigs[i].string,"mrr/getMRRProxy.o") == StringUtil.NOT_FOUND )){
									currentConfigs = new String[](currentConfigs, AuxConfigs[i])
									i2++
								}
							}
						}
						// SETTING CONFIG WITH THE EXTENDED MEMORY
						for (int i = 0 ; i < currentConfigs.arrayLength; i++){
							if ((strUtil.ifind(currentConfigs[i].string,"cache/CacheLRU.o") == StringUtil.NOT_FOUND) &&
								(strUtil.ifind(currentConfigs[i].string,"cache/CacheExtended.o") != StringUtil.NOT_FOUND)){	
									out.println("$(iu.intToString(i)) - $(currentConfigs[i].string)\n")
									perception.setConfig(currentConfigs[iu.intFromString(i)].string)
                                    out.println("Connected to Config $(iu.intToString(i)) \n")
							}
						}	
						
							
						
					} else if (cmd == MR) {
                        out.println("Amount of pods: ")
                        quantity = in.readln()
                        qt = iu.intFromString(quantity)
                        SCTL.create_pods("mr",qt)

                        for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){
							if ((strUtil.ifind(remoteConfigs[i].string,"mr/getMRProxy.o") != StringUtil.NOT_FOUND ) &&
                                (strUtil.ifind(remoteConfigs[i].string,"mrr/getMRRProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hdr/getHDRProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"cache/CacheLRU.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"cache/CacheExtended.o") != StringUtil.NOT_FOUND)){
									out.println("$(i) - $(remoteConfigs[i].string)")
									out.println(" ")
                                    j = iu.makeString(i)
                                    
							}
						}
						
                        out.println("Connecting to Pods on config $(j)")
                        perception.setConfig(remoteConfigs[iu.intFromString(j)].string)
                        // TODO: Debug this
                        
                        
                        out.println("$(debugMSG) Remote composition [(mr/getMRProxy.o)] running.")
                        //distribute("mr/getMRProxy.o")

					} else if (cmd == MRR){
                        out.println("Amount of pods: ")
                        quantity = in.readln()
                        qt = iu.intFromString(quantity)
                        SCTL.create_pods("mrr",qt)
                        
                        for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){
							if ((strUtil.ifind(remoteConfigs[i].string,"mr/getMRProxy.o") == StringUtil.NOT_FOUND ) &&
                                (strUtil.ifind(remoteConfigs[i].string,"mrr/getMRRProxy.o") != StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hdr/getHDRProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"cache/CacheLRU.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"cache/CacheExtended.o") != StringUtil.NOT_FOUND)){
									out.println("$(i) - $(remoteConfigs[i].string)")
									out.println(" ")
                                    j = iu.makeString(i)
							}
						}
						out.println("Connecting to Pods on config $(j)")
						perception.setConfig(remoteConfigs[iu.intFromString(j)].string)
                        
                        out.println("$(debugMSG) Remote composition [(mrr/getMRRProxy.o)] running.")
                        //distribute("mrr/getMRRProxy.o")
					} else if (cmd == HD){

						out.println("Amount of pods: ")
                        quantity = in.readln()
                        qt = iu.intFromString(quantity)
                        SCTL.create_pods("hd",qt)
                        
                        for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){
							if ((strUtil.ifind(remoteConfigs[i].string,"mr/getMRProxy.o") == StringUtil.NOT_FOUND ) &&
                                (strUtil.ifind(remoteConfigs[i].string,"mrr/getMRRProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") != StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hdr/getHDRProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"cache/CacheLRU.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"cache/CacheExtended.o") != StringUtil.NOT_FOUND)){
									out.println("$(i) - $(remoteConfigs[i].string)")
									out.println(" ")
                                    j = iu.makeString(i)
							}
						}
						out.println("Connecting to Pods on config $(j)")
						perception.setConfig(remoteConfigs[iu.intFromString(j)].string)
                        
                        out.println("$(debugMSG) Remote composition [(hd/getHDProxy.o)] running.")
                        //distribute("hd/getHDProxy.o")
					} else if (cmd == HRD){
						out.println("Amount of pods: ")
                        quantity = in.readln()
                        qt = iu.intFromString(quantity)
                        SCTL.create_pods("hdr",qt)
                        
                        for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){
							if ((strUtil.ifind(remoteConfigs[i].string,"mr/getMRProxy.o") == StringUtil.NOT_FOUND ) &&
                                (strUtil.ifind(remoteConfigs[i].string,"mrr/getMRRProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") != StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hdr/getHDRProxy.o") != StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"cache/CacheLRU.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"cache/CacheExtended.o") != StringUtil.NOT_FOUND)){
									out.println("$(i) - $(remoteConfigs[i].string)")
									out.println(" ")
                                    j = iu.makeString(i)
							}
						}
						
						out.println("Connecting to Pods with config $(j)")
						perception.setConfig(remoteConfigs[iu.intFromString(j)].string)
                    
                        out.println("$(debugMSG) Remote composition [(hdr/getHDRProxy.o)] running.")
                        //distribute("hdr/getHDRProxy.o")
                    }else if(cmd == PERCEPTION){
                        out.println("PERCEPTION DATA : ")
                        out.println("$(perception.getPerceptionData())")
                    
                    } else {
						out.println("Invalid command.")
					}
				}
	}

	char[] getRemoteConfig(char proxy[]) {
		for (int pointer = 0; pointer < remoteConfigs.arrayLength; pointer++) {
			if (strUtil.find(remoteConfigs[pointer].string, proxy) != StringUtil.NOT_FOUND) {
				return remoteConfigs[pointer].string
			}
		}
		return null
	}
    void handlePerception(char perceptionData[], TextFile file, char configHandler[]) {
		if (perceptionData == "{}") {
			out.println("$(debugMSG) No perception data.")
			return
		}
		char result[] = ""
		dec value = 0
		int count = 0
		PerceptionData pD[] = encoder.jsonToArray(perceptionData, typeof(PerceptionData[]), null)
		if (((pD != null) && (pD.arrayLength > 0)) && (pD[0].metrics.arrayLength > 0)) {
			result = new char[]("[ ","$(configHandler)"," ] - ")
			value = pD[0].metrics[0].value
			count = pD[0].metrics[0].counter
			dec metricValue = value/count
			//result = new char[](result, pD[0].metrics[0].name, ": ", du.decToString(metricValue), " ms")
            result = new char[](du.decToString(metricValue))
			out.println("$(debugMSG) Response Time : $(result) ms")
            if (file != null) { file.writeLine("$(debugMSG) $(result)") }
		} else {
			out.println("$(debugMSG) No perception data.")
		}
	}

    char[] getVariant(char config[]) {
		String helper[] = strUtil.explode(config, "|")
		helper = strUtil.explode(helper[0].string, ",")
		for (int i = 0; i < helper.arrayLength; i++) {
			if (strUtil.find(helper[i].string, "../dc/ws/NFRP") != StringUtil.NOT_FOUND) {
				return helper[i].string
			}
		}
		return config
	}

	// Guess there's a better way of doing this...
	void remoteLocalSeparation() {
		if ((remoteConfigs == null) || (localConfigs == null)) {
			out.println("$(debugMSG) Separating local and remote compositions...")
			String configs[] = perception.getAllConfigs()
			for (int confPointer = 0; confPointer < configs.arrayLength; confPointer++) {
				bool remote = false
				for (int distProxy = 0; distProxy < distributedProxies.arrayLength; distProxy++) {
					if (strUtil.find(configs[confPointer].string, distributedProxies[distProxy].string)
							!= StringUtil.NOT_FOUND) {
						remoteConfigs = new String[](remoteConfigs, configs[confPointer])
						remote = true
						break
					}
				}
				if (!remote) {
					localConfigs = new String[](localConfigs, configs[confPointer])
				}
			}
		}
	}

	// TODO: dynamically load the names of distributed proxies from the folder distributor/data/adt/
	// currently hard-coded
	void loadDistributedProxies() {
		if (distributedProxies == null) {
			distributedProxies = new String[](
				new String("getMRProxy.o"),
				new String("getMRRProxy.o"),
				new String("getHDProxy.o"),
				new String("getHDRProxy.o"))
		}
	}

	int App:main(AppParam params[]) {
		perception = new Perception(true)
		/* Loading target system and adding a monitoring proxy to it */
		perception.setMain("../repository/TCPNetwork.o", null)
        /*
        out.println("$(debugMSG) Adding Monitoring Proxy...")
        perception.addProxy("|../distributor/monitoring/proxies/DCProxy.o|*(*:hh.HTTPHandler[0]:*)|")
        out.println("$(debugMSG) Proxy added!")
        

        String configs[] = perception.getAllConfigs()
		for (int i = 0; i < configs.arrayLength; i++) {
			out.println("$(debugMSG) $(iu.intToString(i+1)): $(configs[i].string)\n")

		}
		*/
		loadDistributedProxies()
		remoteLocalSeparation()
		local()
		/* command prompt */
		char cmd[] = "start"
		while (cmd != "exit") {
			if (cmd != "start") {
				commandInterpret(cmd)
			}
			out.print("distributor> ")
			cmd = in.readln()
		}
		return 0
	}
}
